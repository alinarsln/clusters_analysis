#include <vector>
#include <set>
#include "My_search.h"

double My_Search::dist(Point q, Point p) {
    double distx, disty;
    distx = q.x - p.x;
    disty = q.y - p.y;
    return sqrt(distx * distx + disty * disty);
}

void My_Search::distance_matrix() {
    a.clear();
    for (int i = 0; i < points_nmb; i++) {
        vector<double> dist_for_point;
        for (int j = 0; j < points_nmb; j++) {
            dist_for_point.push_back(dist(f.all_points[i], f.all_points[j]));
        }
        a.push_back(dist_for_point);

    }
}

void My_Search::binary_matrix(double dt) {
    distance_matrix();
    b = new int *[points_nmb];
    for (int i = 0; i < points_nmb; i++)
        b[i] = new int[points_nmb];
    for (int i = 0; i < points_nmb; i++)
        for (int j = i; j < points_nmb; j++) {
            if (a[i][j] <= dt) {
                b[i][j] = 1;
                b[j][i] = 1;
            } else {
                b[i][j] = 0;
                b[j][i] = 0;
            }

        }
}

void My_Search::wave(double dt) {
    clusters.clear();

    set<int> used;
    binary_matrix(dt);

    for (int i = 0; i < f.all_points.size();i++) {
        if (used.count(i) != 0) continue;
        Cluster cluster;
        vector<int> queue;
        queue.push_back(i);
        while (!queue.empty()) {
            int cur = queue.front();
            queue.erase(queue.begin());
            for (int j = 0; j < f.all_points.size(); j++) {
                if (b[cur][j]==1 && used.count(j) == 0) {
                    used.insert(j);
                    cluster.points.push_back(f.all_points[j]);
                    queue.push_back(j);
                }
            }
        }
        clusters.push_back(cluster);
    }

}



void My_Search::make_first_centers() {

    for (int i = 0; i < k; i++) {

        centres.push_back(f.all_points[i]);

    }
    for (int i = 0; i < points_nmb; i++) {
        Point a(0, 0);
        old_centres.push_back(a);
        new_centres.push_back(a);
    }

}

void My_Search::iteration() {
    int min_index;

    double min_dist;
    for (int i = 0; i < points_nmb; i++) {
        min_dist = dist(f.all_points[i], centres[0]);
        min_index = 0;
        for (int j = 0; j < k; j++) {
            if (dist(f.all_points[i], centres[j]) < min_dist) {
                min_dist = dist(f.all_points[i], centres[j]);
                min_index = j;
            }

        }
        old_centres[i].x = new_centres[i].x;
        old_centres[i].y = new_centres[i].y;
        new_centres[i].x = centres[min_index].x;
        new_centres[i].y = centres[min_index].y;
    }
    double sx = 0, sy = 0;
    int count = 0;
    for (int i = 0; i < k; i++) {
        sx = 0;
        sy = 0;
        count = 0;

        for (int j = 0; j < points_nmb; j++) {
            if (new_centres[j] == centres[i]) {
                count++;
                sx = sx + f.all_points[j].x;
                sy = sy + f.all_points[j].y;
            }
        }
        if (count != 0) centres[i].x = sx / count;

        if (count != 0) centres[i].y = sy / count;


    }

}

void My_Search::k_mean() {
    clusters.clear();
    int right = 0;
    make_first_centers();
    while (right != points_nmb) {
        right = 0;
        iteration();
        for (int i = 0; i < points_nmb; i++) {
            if (old_centres[i] == new_centres[i]) right++;
            else break;
        }

    }

    for (int i = 0; i < k; i++) {
        Cluster cluster;
        for (int j = 0; j < points_nmb; j++) {
            if (new_centres[j] == centres[i]) {
                cluster.points.push_back(f.all_points[j]);
            }
        }
        clusters.push_back(cluster);
    }
}

void My_Search::spanning_tree() {
    distance_matrix();
    vector<bool> used(points_nmb, false);
    vector<double> min_e(points_nmb, a[0][1]);
    vector<int> sel_e(points_nmb, -1);
    for (int i = 0; i < points_nmb; i++) {
        int v = -1;
        for (int j = 0; j < points_nmb; j++)
            if ((!used[j]) && (v == -1 || (v != -1 && min_e[j] <= min_e[v])))
                v = j;

        used[v] = true;
        if (sel_e[v] != -1) {
            tree_edges.push_back(make_pair(f.all_points[v], f.all_points[sel_e[v]]));
            tree_length.push_back(dist(f.all_points[v], f.all_points[sel_e[v]]));

        }
        for (int to = 0; to < points_nmb; ++to)
            if (a[v][to] < min_e[to]) {
                min_e[to] = a[v][to];
                sel_e[to] = v;
            }
    }
}

Point My_Search::mass_centre(vector<Point> points, vector<int> inside_circle) {
    double x, y;
    for (int i = 0; i < (int) inside_circle.size(); i++) {
        x += points[inside_circle[i]].x;
        y += points[inside_circle[i]].y;

    }
    x = x / (int) inside_circle.size();
    y = y / (int) inside_circle.size();
    return Point(x, y);
}

void My_Search::change_matrix(int c, int d, Point p, vector<Point> all_points) {
    a.erase(a.begin() + d);
    for (int i = 0; i < (int) a.size(); i++)
        a[i].erase(a[i].begin() + d);

    for (int i = 0; i < (int) all_points.size(); i++) {
        a[c][i] = dist(p, all_points[i]);
        a[i][c] = a[c][i];

    }
}

void My_Search::hierarchical(int k_last) {
    clusters.clear();
    double min_dist;
    distance_matrix();
    vector<Point> all_points;
    for (int i = 0; i < (int) f.all_points.size(); i++) {
        Cluster cluster;
        cluster.points.push_back(f.all_points[i]);
        clusters.push_back(cluster);
        all_points.push_back(f.all_points[i]);
    }//all points in own cluster
    while (a.size() != k_last) {
        min_dist = a[0][1];
        int point_a = 0;
        int point_b = 1;

        for (int i = 0;
             i < (int) a.size(); i++) {//searching for min distance between all clusters, and the name of them
            for (int j = i + 1; j < (int) a.size(); j++)
                if (a[i][j] < min_dist) {
                    min_dist = a[i][j];
                    point_a = i;
                    point_b = j;
                }
        }
        double x, y;
        x = (all_points[point_a].x + all_points[point_b].x)/2;
        y = (all_points[point_a].y + all_points[point_b].y)/2;
        Point p(x, y);
        h_centres.push_back(p);
        denrdogramm.push_back(make_pair(all_points[point_a], p));
        denrdogramm.push_back(make_pair(all_points[point_b], p));
        clusters[point_a].points.insert(clusters[point_a].points.end(), clusters[point_b].points.begin(),
                                        clusters[point_b].points.end());//make two clusters in one// sliyanie
        clusters.erase(clusters.begin() + point_b);
        all_points[point_a] = p;
        all_points.erase(all_points.begin() + point_b);

        change_matrix(point_a, point_b, p, all_points);


    }

}

void My_Search::forel(double r) {
    clusters.clear();
    vector<Point> all_points2;
    for (int i = 0; i < points_nmb; i++)
        all_points2.push_back(f.all_points[i]);
    vector<int> inside_circle;
    Point y0(0, 0);
    while ((int) all_points2.size() != 0) {
        Point x0 = all_points2[rand() % all_points2.size()];

        while (x0 != y0) {
            inside_circle.clear();
            y0 = x0;//y0-current object
            for (int i = 0; i < (int) all_points2.size(); i++)
                if (dist(all_points2[i], x0) < r)//searching for points that are <r
                {
                    inside_circle.push_back(i);

                }
            x0 = mass_centre(all_points2, inside_circle);//

        }
        Cluster cluster;
        for (int i = 0; i < (int) inside_circle.size(); i++)
            cluster.points.push_back(all_points2[inside_circle[i]]);
        for (int i = 0; i < (int) inside_circle.size(); i++)
            all_points2.erase(all_points2.begin() + inside_circle[i] - i);
        clusters.push_back(cluster);
    }


}

vector<int> My_Search::neighbors(double r, Point x0) {
    vector<int> neighbors;
    for (int i = 0; i < (int) f.all_points.size(); i++) {
        if (dist(f.all_points[i], x0) <= r && dist(f.all_points[i], x0) >= 0) {
            neighbors.push_back(i);
        }
    }
    return neighbors;
}

vector<int> My_Search::make_unique(vector<int> points, vector<int> add_points) {
    vector<int> t;
    for (int i = 0; i < (int) add_points.size(); i++) {
        bool u = false;
        for (int j = 0; j < (int) points.size(); j++) {
            if (add_points[i] == points[j]) {
                u = true;
                break;
            }

        }
        if (u == false) {
            t.push_back(add_points[i]);
        }
    }
    for (int i = 0; i < (int) t.size(); i++)
        points.push_back(t[i]);
    return points;
}

void My_Search::dbscan(int min_point_nmb, double r) {
    clusters.clear();
    vector<int> label(points_nmb, 0);//0-not used,-1-noise,others-number of cluster//
    vector<int> n;//vector of neighbors researched point
    vector<int> s;//vector of neighbors of neighbors of researched point;
    vector<int> t;
    int c = 0;//for clusters
    for (int i = 0; i < points_nmb; i++) {

        if (label[i] == 0) {
            n.clear();
            n = neighbors(r, f.all_points[i]);//neighbors in cluster
            //n.insert(n.begin(),neighbors(r,f.all_points[i]).begin(),neighbors(r,f.all_points[i]).end());
            if ((int) n.size() < min_point_nmb - 1) {
                label[i] = -1;//it's noise-separate cluster
            } else {
                Cluster cluster;
                c++;
                cluster.points.push_back(f.all_points[i]);
                label[i] = c;
                for (int j = 0; j < (int) n.size(); j++) {
                    if (label[n[j]] == 0) {
                        cluster.points.push_back(f.all_points[n[j]]);
                        s.clear();
                        s = neighbors(r, f.all_points[n[j]]);
                        if ((int) s.size() >= min_point_nmb - 1) {
                            label[n[j]] = c;
                            n = make_unique(n, s);
                        } else label[n[j]] = -1;

                    }
                    if (label[n[j]] == -1) {
                        label[n[j]] = c;
                        cluster.points.push_back(f.all_points[n[j]]);
                    }

                }
                clusters.push_back(cluster);
            }


        }


    }
    for (int i = 0; i < points_nmb; i++) {
        if (label[i] == -1) {
            Cluster cluster;
            cluster.points.push_back(f.all_points[i]);
            clusters.push_back(cluster);
        }
    }

}



